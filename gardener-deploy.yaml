---
apiVersion: v1
kind: Secret
metadata:
  name: garden-setup-config
  namespace: default
type: Opaque
data:
  kubeconfig: >-
    
  acre.yaml: >-
    Y3JlZGVudGlhbHM6ICZyZWZfMAogIHNlcnZpY2VhY2NvdW50Lmpzb246IG51bGwKbGFuZHNjYXBlOgogIG5hbWU6IHN1ZG9qb3NzLWNvbQogIGNsdXN0ZXI6CiAgICBrdWJlY29uZmlnOiAuL2t1YmVjb25maWcKICAgIGRvbWFpbjogc3Vkb2pvc3MuY29tCiAgICBpYWFzOiBnY3AKICAgIHJlZ2lvbjogZXVyb3BlLXdlc3QxCiAgbmV0d29ya3M6CiAgICBwb2RzOiBudWxsCiAgICBub2RlczogbnVsbAogICAgc2VydmljZXM6IG51bGwKICBpYWFzOgogICAgcmVnaW9uOiBldXJvcGUtd2VzdDEKICAgIHpvbmVzOgogICAgICAtIGV1cm9wZS13ZXN0MS1iCiAgICBjcmVkZW50aWFsczogKnJlZl8wCiAgZXRjZDoKICAgIGJhY2t1cDoKICAgICAgdHlwZTogZ2NzCiAgICAgIHJlZ2lvbjogZXVyb3BlLXdlc3QxCiAgICAgIGNyZWRlbnRpYWxzOiAqcmVmXzAKICBkbnM6CiAgICB0eXBlOiBnb29nbGUtY2xvdWRkbnMKICAgIGNyZWRlbnRpYWxzOiAqcmVmXzAKICBpZGVudGl0eToKICAgIHVzZXJzOgogICAgICAtIGVtYWlsOiBqcGh1Yzk2QGdtYWlsLmNvbQogICAgICAgIHVzZXJuYW1lOiBqcGh1Yzk2QGdtYWlsLmNvbQogICAgICAgIHBhc3N3b3JkOiBob2FuZ3BodWMxOTk2Cg==
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: garden-setup-state
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: Pod
metadata:
  name: garden-setup-installer
  namespace: default
spec:
  restartPolicy: Never
  containers:
    - name: garden-setup-installer
      image: 'diaphteiros/garden-setup:stable'
      imagePullPolicy: Always
      command:
        - ./run.sh
        - '--color'
        - deploy
        - '-An'
      resources: {}
      volumeMounts:
        - name: garden-setup-config
          mountPath: /etc/garden-setup/config
        - name: garden-setup-state
          mountPath: /landscape
  volumes:
    - name: garden-setup-config
      secret:
        secretName: garden-setup-config
    - name: garden-setup-state
      persistentVolumeClaim:
        claimName: garden-setup-state
